#!/usr/bin/env python3
#
# Translated from the Bash script `knit.orig`.
#
# Setup: something like
#   $ pip install --user click
#   $ ln -s "${PYSH_WORKTREE}"/pysh ~/.local/lib/python3.7/site-packages/
#
# "TODO" comments mark things that could be improved in Pysh.

import subprocess
import sys

import click
from click import ClickException
from pysh import check_cmd, cmd, shwords, slurp_cmd, try_cmd, try_slurp_cmd


class MissingBranchException(ClickException):
    def __init__(self, branch_name):
        super().__init__(f"No such branch: {branch_name}")


# These data structures would be different if writing in Python
# in the first place.
branch_names = []
commit_ids = []

def add_branch(name):
    commit_id = try_slurp_cmd('git rev-parse --verify --quiet {}', name)
    if commit_id is None:
        commit_id = try_slurp_cmd('git rev-parse --verify --quiet origin/{}', name)
    if commit_id is None:
        raise MissingBranchException(name)

    branch_names.append(name)
    commit_ids.append(commit_id.decode('utf-8'))  # TODO :'-(


KNOWN_HOSTS = ['dark-matter', 'brown-dwarf']

@click.command()
@click.argument("host", metavar='HOST', type=click.Choice(KNOWN_HOSTS))
def main(host):
    if not try_cmd('git diff-index --quiet HEAD'):
        raise ClickException("worktree not clean")

    add_branch('master')
    add_branch('datacomp')
    try: add_branch(f"{host}.only")
    except MissingBranchException:
        pass

    check_cmd("git checkout {}", commit_ids[0])
    check_cmd("git merge {!@} -m {}",
        commit_ids[1:], f"Temp merge for {host}: " + " ".join(branch_names[1:]))


if __name__ == '__main__':
    main()
